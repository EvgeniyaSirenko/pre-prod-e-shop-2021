package com.epam.preprod.sirenko.strategy.impl;

import com.epam.preprod.sirenko.enums.PetGroup;
import com.epam.preprod.sirenko.enums.Season;
import com.epam.preprod.sirenko.enums.Size;
import com.epam.preprod.sirenko.strategy.Strategy;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.Random;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.*;

class AutoGeneratedProductCreationStrategyTest {
	private AutoGeneratedProductCreationStrategy autoGeneratedProductCreation;
	private Strategy strategy;
	private Random random;
	
	@BeforeEach
	public void SetData() {
		autoGeneratedProductCreation = new AutoGeneratedProductCreationStrategy();
		strategy = mock(Strategy.class);
		random = mock(Random.class);
	}
	
	@Test
	void getInt() {
		when(random.nextInt(anyInt())).thenReturn(10);
		//TODO doesn't work
		assertEquals(10, autoGeneratedProductCreation.getInt());
	}
	
	@Test
	void getPetGroup() {
		when(strategy.getPetGroup()).thenReturn(PetGroup.CAT);
		
		assertEquals(PetGroup.CAT, autoGeneratedProductCreation.getPetGroup());
	}
	
	@Test
	void getSeason() {
		when(strategy.getSeason()).thenReturn(Season.WINTER);
		
		assertEquals(Season.WINTER, autoGeneratedProductCreation.getSeason());
	}
	
	@Test
	void getSize() {
		when(strategy.getSize()).thenReturn(Size.S);
		
		assertEquals(Size.S, autoGeneratedProductCreation.getSize());
	}
	
	@Test
	void getStringName() {
	//	when(strategy.getStringName()).thenReturn("Name");
		
		assertEquals("Name", autoGeneratedProductCreation.getStringName());
	}
	
	@Test
	void getStringBrandName() {
	//	when(autoGeneratedProductCreation.getStringBrandName()).thenReturn("Brand");
		
		assertEquals("Name", autoGeneratedProductCreation.getStringBrandName());
	}
	
	@Test
	void getBigDecimal() {
		when(random.nextInt(anyInt())).thenReturn(10);
		
		assertEquals(BigDecimal.valueOf(10), autoGeneratedProductCreation.getBigDecimal());
	}
}